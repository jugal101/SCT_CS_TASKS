import random
import logging

# Set up logging for debugging purposes
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def caesar_cipher(text: str, shift: int, mode: str = "encrypt") -> str:

    if not isinstance(text, str) or not isinstance(shift, int):
        raise ValueError("Invalid input: text must be a string and shift must be an integer.")

    result = []
    for char in text:
        if char.isalpha():
            shift_amount = shift % 26  # Ensure shift wraps correctly
            start = ord('a') if char.islower() else ord('A')
            new_char = chr((ord(char) - start + (shift_amount if mode == "encrypt" else -shift_amount)) % 26 + start)
            result.append(new_char)
        else:
            result.append(char)  
    
    return "".join(result)

def main():
    try:
        message = input("Enter the message: ").strip()
        mode = input("Enter mode (encrypt/decrypt): ").strip().lower()
        
        if mode not in ['encrypt', 'decrypt']:
            print("Error: Invalid mode. Choose 'encrypt' or 'decrypt'.")
            return
        
        shift = random.randint(1, 25)  # Random shift value for added security
        print(f"Using shift value: {shift}")
        
        result = caesar_cipher(message, shift, mode)
        print(f"Result ({mode}ed): {result}")

    except Exception as e:
        logging.error(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
